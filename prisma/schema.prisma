// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accountType   String    @default("personal")
  company       String?
  twoFactorEnabled Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  files         File[]
  folders       Folder[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id          String   @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String
  key         String   @unique
  iv          String?  // Initialization vector for encryption
  isPublic    Boolean  @default(false)
  isStarred   Boolean  @default(false)
  folderId    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?  @relation(fields: [folderId], references: [id])
  shares      FileShare[]
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  parentId    String?
  userId      String
  isStarred   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderToFolder")
  files       File[]
  shares      FolderShare[]
}

model FileShare {
  id          String   @id @default(cuid())
  fileId      String
  email       String?
  accessCode  String?  @unique
  permission  String   @default("view") // view, edit, etc.
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model FolderShare {
  id          String   @id @default(cuid())
  folderId    String
  email       String?
  accessCode  String?  @unique
  permission  String   @default("view") // view, edit, etc.
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  folder      Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
}
